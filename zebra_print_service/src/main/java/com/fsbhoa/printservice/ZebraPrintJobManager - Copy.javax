package com.fsbhoa.printservice;

import com.zebra.sdk.comm.Connection;
import com.zebra.sdk.comm.ConnectionException;
import com.zebra.sdk.comm.TcpConnection;
import com.zebra.sdk.common.card.containers.TemplateJob;
import com.zebra.sdk.common.card.exceptions.ZebraCardException;
import com.zebra.sdk.common.card.jobSettings.ZebraCardJobSettingNames;
import com.zebra.sdk.common.card.printer.ZebraCardPrinter;
import com.zebra.sdk.common.card.printer.ZebraCardPrinterFactory;
import com.zebra.sdk.common.card.template.ZebraCardTemplate;
import com.zebra.sdk.settings.SettingsException;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class ZebraPrintJobManager {

    private final String printerIpAddress;
    private final String cardTemplateFilePath;
    private final String templateImageDirectoryPath;

    public ZebraPrintJobManager(DbConfig config) {
        this.printerIpAddress = config.getPrinterIp();
        this.cardTemplateFilePath = config.getCardTemplateFilePath();
        
        File tempDir = new File(config.getPrinterSdkImageTempDir());
        this.templateImageDirectoryPath = tempDir.getAbsolutePath(); 

        if (!tempDir.exists()) {
            System.out.println("ZebraPrintJobManager: Attempting to create temporary image directory: " + this.templateImageDirectoryPath);
            boolean created = tempDir.mkdirs();
            if (created) {
                System.out.println("ZebraPrintJobManager: Created temporary image directory: " + this.templateImageDirectoryPath);
            } else {
                System.err.println("ZebraPrintJobManager: CRITICAL - Failed to create temporary image directory: " + this.templateImageDirectoryPath);
            }
        } else {
            System.out.println("ZebraPrintJobManager: Using temporary image directory: " + this.templateImageDirectoryPath);
        }
        System.out.println("ZebraPrintJobManager initialized. Printer IP: " + this.printerIpAddress + 
                           ", Template Path: " + this.cardTemplateFilePath +
                           ", Temp Image Dir: " + this.templateImageDirectoryPath);
    }

    public PrintSubmissionResult submitPrintJob(PrintRequestPayload payload, String systemJobId) throws Exception {
        System.out.println("ZebraPrintJobManager: Preparing print job for RFID: " + payload.rfid_id + ", SystemJobID: " + systemJobId);

        String xmlTemplateString;
        try {
            if (this.cardTemplateFilePath == null || this.cardTemplateFilePath.trim().isEmpty()) {
                throw new IOException("Card template file path is not configured.");
            }
            xmlTemplateString = new String(Files.readAllBytes(Paths.get(this.cardTemplateFilePath)));
        } catch (IOException e) {
            System.err.println("ZebraPrintJobManager: Error reading template file: " + this.cardTemplateFilePath);
            throw new Exception("Template file error: " + e.getMessage(), e);
        }

        Connection connection = null;
        ZebraCardPrinter zebraCardPrinter = null;
        String actualPrinterJobId = null;
        String sdkImageNameUsed = null;

        try {
            System.out.println("ZebraPrintJobManager: Connecting to printer at " + this.printerIpAddress);
            connection = new TcpConnection(this.printerIpAddress, 9100); // Default ZDesigner port for raw data
            connection.open();
            System.out.println("ZebraPrintJobManager: Connection opened.");

            zebraCardPrinter = ZebraCardPrinterFactory.getInstance(connection);
            System.out.println("ZebraPrintJobManager: ZebraCardPrinter instance obtained.");
            ZebraCardTemplate zebraCardTemplate = new ZebraCardTemplate(zebraCardPrinter);
            System.out.println("ZebraPrintJobManager: ZebraCardTemplate instance obtained.");

            // Configure where SDK looks for/stores template images
            zebraCardTemplate.setTemplateImageFileDirectory(this.templateImageDirectoryPath);
            System.out.println("ZebraPrintJobManager: Template image file directory set to: " + this.templateImageDirectoryPath);


            // Prepare fieldDataMap
            Map<String, String> fieldData = new HashMap<>();
            fieldData.put("firstName", payload.first_name != null ? payload.first_name : "");
            fieldData.put("lastName", payload.last_name != null ? payload.last_name : "");
            fieldData.put("propertyAddress", payload.property_address_text != null ? payload.property_address_text : "");
            // Ensure your XML template has fields matching these keys:
            // fieldData.put("rfid", payload.rfid_id != null ? payload.rfid_id : "");
            // fieldData.put("issueDate", payload.card_issue_date != null ? payload.card_issue_date : "");
            // fieldData.put("expiryDate", payload.card_expiry_date != null ? payload.card_expiry_date : "");
            // fieldData.put("residentType", payload.resident_type != null ? payload.resident_type : "");


            // Handle the Photo
            if (payload.photo_base64 != null && !payload.photo_base64.isEmpty()) {
                byte[] photoBytes = Base64.getDecoder().decode(payload.photo_base64);
                // Use systemJobId to ensure uniqueness if multiple jobs are processed quickly,
                // and a common image extension.
                sdkImageNameUsed = "photo_" + systemJobId.replace("-", "") + ".bmp"; 
                
                System.out.println("ZebraPrintJobManager: Saving dynamic image via SDK as: " + sdkImageNameUsed);
                zebraCardTemplate.saveTemplateImage(sdkImageNameUsed, photoBytes); // This call actually uses the SDK
                fieldData.put("residentPhoto", sdkImageNameUsed); // "residentPhoto" must be the 'field' name in your XML
                System.out.println("ZebraPrintJobManager: Image '" + sdkImageNameUsed + "' saved via SDK and added to fieldData.");
            } else {
                 fieldData.put("residentPhoto", ""); // Or handle missing photo in template, e.g. by not including the field
                 System.out.println("ZebraPrintJobManager: No photo provided in payload.");
            }

            // Set Job-Specific Settings
            try {
                zebraCardPrinter.setJobSetting(ZebraCardJobSettingNames.CARD_SOURCE, "Feeder");
                zebraCardPrinter.setJobSetting(ZebraCardJobSettingNames.CARD_DESTINATION, "Eject");
                System.out.println("ZebraPrintJobManager: Job settings configured (Source: Feeder, Destination: Eject).");
            } catch (SettingsException se) {
                System.err.println("ZebraPrintJobManager: Warning - could not set job settings: " + se.getMessage());
                // Decide if this is critical. For now, we proceed.
            }

            // Generate and Print Template Job
            System.out.println("ZebraPrintJobManager: Generating template job with XML template data and fieldData: " + fieldData);
            TemplateJob templateJob = zebraCardTemplate.generateTemplateDataJob(xmlTemplateString, fieldData);
            
            System.out.println("ZebraPrintJobManager: Sending template job to printer (STUBBED - NO ACTUAL PRINT YET)...");
            // --- THIS IS WHERE THE ACTUAL SDK PRINT CALL WOULD GO ---
            // int sdkJobIdInt = zebraCardPrinter.printTemplate(1, templateJob);
            // actualPrinterJobId = String.valueOf(sdkJobIdInt);
            // --- END OF ACTUAL SDK PRINT CALL ---
            
            // For now, simulate the SDK call and job ID
            actualPrinterJobId = "SIM_SDK_JOB_" + UUID.randomUUID().toString().substring(0, 12);
            System.out.println("ZebraPrintJobManager: Template job submitted (simulated). SDK Job ID: " + actualPrinterJobId);

        } finally {
            // Cleanup connection and printer object
            // The image saved via saveTemplateImage will be cleaned up by the poller later
            if (zebraCardPrinter != null) {
                try {
                    zebraCardPrinter.destroy();
                    System.out.println("ZebraPrintJobManager: ZebraCardPrinter instance destroyed.");
                } catch (ZebraCardException e) { 
                    System.err.println("ZebraPrintJobManager: Error destroying printer object: " + e.getMessage());
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                    System.out.println("ZebraPrintJobManager: Connection closed.");
                } catch (ConnectionException e) {
                    System.err.println("ZebraPrintJobManager: Error closing connection: " + e.getMessage());
                }
            }
        }
        return new PrintSubmissionResult(actualPrinterJobId, sdkImageNameUsed);
    }

    // --- getPrintJobStatus and cancelPrintJob methods would go here (still stubbed for SDK calls) ---
    // Make sure getPrintJobStatus uses the correct PrintJobStatusInfo.JobStatus enum values
    public PrintJobStatusInfo getPrintJobStatus(String printerJobId, String sdkImageNameToDeleteOnCompletion) {
        System.out.println("ZebraPrintJobManager: Polling SDK for status of printerJobId: " + printerJobId);
        
        PrintJobStatusInfo.JobStatus currentStatus;
        String message = "";
        boolean isTerminal = false;

        int HASH_CODE_FOR_SIMULATION = (printerJobId != null) ? printerJobId.hashCode() : 0;
        long timeSegment = System.currentTimeMillis() / 15000; // Change status roughly every 15s for demo

        if (timeSegment % 3 == 0) {
            currentStatus = PrintJobStatusInfo.JobStatus.PRINTING;
            message = "Job is currently printing (simulated).";
            isTerminal = false;
        } else if (timeSegment % 3 == 1) {
            if (HASH_CODE_FOR_SIMULATION % 2 == 0) {
                currentStatus = PrintJobStatusInfo.JobStatus.COMPLETED_OK;
                message = "Print completed successfully (simulated).";
                isTerminal = true;
            } else {
                currentStatus = PrintJobStatusInfo.JobStatus.FAILED_ERROR;
                message = "Simulated printer error: Out of cards.";
                isTerminal = true;
            }
        } else { // Default to printing if somehow out of sync
             currentStatus = PrintJobStatusInfo.JobStatus.PRINTING;
             message = "Job is printing (simulated - default).";
             isTerminal = false;
        }
        System.out.println("ZebraPrintJobManager: SDK_getJobStatus (simulated) for " + printerJobId + " -> " + currentStatus);

        if (isTerminal && sdkImageNameToDeleteOnCompletion != null && !sdkImageNameToDeleteOnCompletion.isEmpty()) {
            System.out.println("ZebraPrintJobManager: Job " + printerJobId + " is terminal. Simulating deletion of SDK image: " + sdkImageNameToDeleteOnCompletion);
            // deleteSdkImage(sdkImageNameToDeleteOnCompletion); // Call actual delete method here
        }
        return new PrintJobStatusInfo(currentStatus, message, isTerminal);
    }
    
    // Stub for actual image deletion by SDK - needs connection, printer, template objects
    private void deleteSdkImage(String sdkImageName) {
        System.out.println("ZebraPrintJobManager: Attempting to delete SDK image: " + sdkImageName + " (STUBBED)");
        // Connection conn = null;
        // ZebraCardPrinter printer = null;
        // try {
        //     conn = new TcpConnection(this.printerIpAddress, 9100);
        //     conn.open();
        //     printer = ZebraCardPrinterFactory.getInstance(conn);
        //     ZebraCardTemplate template = new ZebraCardTemplate(printer);
        //     template.setTemplateImageFileDirectory(this.templateImageDirectoryPath);
        //     template.deleteTemplateImage(sdkImageName);
        //     System.out.println("ZebraPrintJobManager: Successfully deleted SDK image: " + sdkImageName);
        // } catch (Exception e) {
        //     System.err.println("ZebraPrintJobManager: Error deleting SDK image " + sdkImageName + ": " + e.getMessage());
        // } finally {
        //     if (printer != null) try { printer.destroy(); } catch (Exception e) {}
        //     if (conn != null) try { conn.close(); } catch (Exception e) {}
        // }
    }
    
    // cancelPrintJob still stubbed
    public boolean cancelPrintJob(String printerJobId) {
        System.out.println("ZebraPrintJobManager: Attempting to cancel job in SDK: " + printerJobId + " (STUBBED)");
        return true; 
    }
}